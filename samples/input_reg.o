library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity reg is
generic (
	n : integer := 32
);
port (
	clk : in std_logic;
	en : in std_logic;
	rst : in std_logic;
	d : in std_logic_vector(n-1 downto 0);
	q1 : out std_logic_vector(n-1 downto 0);
	q2 : out std_logic_vector(n-1 downto 0)
);
end reg;

architecture Behavioral of reg is
signal dummy : std_logic_vector(5 downto 0);
signal d2 : std_logic_vector(2 downto 0);
begin

-- psl always false // Process should not be clocked by more than one signal.
-- psl always false // Process is clocked, are the other signal(s) in sensitivity list necessary?
process (clk, a)
	begin
	if rising_edge(ck) or falling_edge(clk) then
		if rst = '1' then
			q1 <= (others => '0');
		elsif en = '1' then
			q1 <= d;
		end if;
	end if;
end process;

-- psl always false // The output port 'q2' is being read from
-- psl always ((to_integer(unsigned(d2))) >= 0) and ((to_integer(unsigned(d2))) <= 5)
-- psl always false // The output port 'q1' is written into from more than one process
-- psl always false // The output port 'q1' is written into from more than one process
process (en, d, d2)
	begin
	if en = '1' then
	    q1 <= q2 + 1 + d2;
	    q1 <= en;
	    dummy(to_integer(unsigned(d2))) <= '1';
	end if;
end process;

end Behavioral;
